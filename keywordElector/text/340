i   ve been getting this question a lot recently  in various forms  how   d you learn to code  how should i learn to code  any good programming books you suggest  it   s hard for me to answer these questions because i learned in a rather non traditional way  i can   t guarantee to any of these eagerly aspiring programmers that my way is the best way to learn  but i do know it worked out very well thus far for me  so i can only hope that by publishing it it will help others first off  i   m a    year old sophomore neuroscience student   notably not cs  etc      months ago  my experience with programming was limited to a cs course in high school  by   month ago i had joined a renowned computational neuroscience lab  had my side projects featured in techcrunch  received a full time engineering job offer from amazon  internship offers from google  apple  ebay  yahoo  etc  in addition to a handful of startups  and had been invited and flown out to hackathons and tech events across the country  now i   m founding my own tech startup  this is how it happened this you should be able to glean from reading the story  but here   s the distilled method  i learned by doing small project after project that i was very passionate about slightly outside of my skill set  with each iteration i grew slightly more knowledgeable in the domain  but also had enough prior information to proceed without giving up  knowing i was close enough to succeed if only i learned a little on my own it   s a little hard to choose projects that fit this exact description  but you have to select projects at a certain point along the continuum  you   ll know when you   ve found a project that fits this description  you   ll be so excited you begin work immediately  working on it right away means that you know enough to get started  great my immediate advice if you   d like to learn to code is to come up with what you want to build  you   re not learning the science of computation  if you are i urge you to pursue that interest academically  you   re here to learn how to build software  so i urge you to learn by doing just that  building software again  this needs to adhere to all the rules i specified above  so first you should lay out what your skills and interests are  then compile a list of ideas and their requisite skills   you   ll even learn a bit just looking up what you   ll need to know to build these ideas  if you need help feel free to email me  your candidate first projects are the intersection of the skills you have and what you want to build i realize i asked you to lay out your skills  and you may be here because you don   t have any technical skills yet  if that   s your case  you   re fine and this will still work for you  the building blocks here are very simple  and the whole method is very self directed  if you have absolutely no technical background initially  and have no particular direction you   d like to go  i e  mobile vs web vs desktop  etc   i recommend you start with building your own personal webpage in html  everyone is passionate about themselves  i won   t link you directly to a tutorial  but use the search engine of your choice to explore the internet   s vast learning resources on any particular topic   like this   i highly recommend tutorials you   ve found on your own  because it constitutes learning how to learn with sufficient motivation  i believe you can build anything  what i love most about programming   but pick something small  something you know everything or almost everything to complete first  in the interest of continued learning  i   d much rather you finish building something small and useless than give up building something big for your first project  once that is done  and you   ve established a comfort zone  learn how to step out of it and come up with more ambitious projects than your first  don   t stick with the list you came up with first  constantly re evaluate your current skill set and watch as your candidate ideas become more significant and ambitious with the finalized list of candidate ideas  rank them by how interesting they are to you  and simply choose the one that   s most interesting  that you   d like to see finished most  all of these should be  with some variance  accomplishable with your current skills  so don   t worry about small variations and instead go with what you   re most interested in  in my experience the limiting factor to success  of a simple project or life in general  is not difficulty but passion once you have your idea  take that initial research on what skills you   ll need to build it and do the research again  more thoroughly this time  modularize your project  break it down into discrete steps and necessary skills  use queries like    how to make x    and look up every word you don   t know in the results  then do the same for those results  find components of your project that could be independent from the main project  and figure out how to build those or see if someone else already has  it   s likely someone has  and it   s open source   don   t be afraid to build on the work of others  sir isaac newton famously noted    if i have seen further it is by standing on the shoulders of giants    if it   s hard for you to determine how exactly to build your project from simply searching the internet  consult the most technical person you know  asking what you need to know to build something is actually a pretty easy question to ask of someone with such knowledge  as opposed to asking them to help you build it or build it themselves  if they don   t oblige or you don   t know anyone technical  i will  get in touch with me and i   ll be glad to get you going clearly  this approach requires some self motivation  but it takes advantage of your existing passions  so it shouldn   t be too difficult  you need to be able to excite yourself over an idea  fortunately i   ve never met anyone without such a capacity  also  i don   t think this method applies exclusively to coding  but i have no evidence to that end so    y m m v further  and i make this an aside to the main method because it isn   t integral to simply learning to code but it is necessary for doing well on all those interviews you   ll get and developing quality engineering skills  grab a copy of    cracking the coding interview     not affiliated with me at all  and look up everything you don   t know how to solve  don   t stop at figuring out the solution to the problems  read around the locality of information available  consult the oracle  and you   ll be able to ace any technical interview  and in general approach problems you encounter that have already been solved with existing highly optimized solutions instead of reinventing the wheel here   s my story  not all of it  just how i learned to program  i   ll start with an event in the summer after sophomore year in high school because it clearly demonstrates the method i outlined above  i   d just finished an introductory  very introductory  computer science elective course in which we developed some simple terminal applications and learned the basics of the programming language  java  i was helping my brother prepare for a spelling bee by reciting words from a list and asking him to spell them  verifying their correctness afterwards  this was one of the most frustratingly tedious things i   d ever done  at one point i broke down and exclaimed how tedious it was and that i felt like a machine  in fact i know a machine could do this just as well  i told my brother how a simple speech synthesis engine could read out the words and string comparison could easily verify the accuracy of his spelling  he asked why i didn   t make something that did that then  to which i responded that i don   t know how and he remarked that i never actually build anything i have ideas for  this upset me very much  and although it was   in the evening i left him mid study session to lock myself in my room and figure out how to build what i   d described  i knew java  so at first i looked into texttospeech synthesis engines in java  but most had complicated implementations and were of very poor quality  until i came across the idea to build an android app  i learned that android apps were developed in java  i knew java   and that the android sdk included a very simple api for tts     hours later  sleepless  i   d learned android development and built spellcoach for my brother to study for his spelling bee  my mother suggested i put it on the android market to save someone else the same suffering which motivated me to build it  and although i haven   t touched it since it was an incredible learning experience and exemplifies the accelerative powers of the method i distilled above fast forward several years  in april      i applied to a competitive medical neuroscience research fellowship that i   d been almost guaranteed admission to  but at the last minute they decided not to accept me because they realized i was a freshman and they wanted only upperclassmen  this was in late april  so i freaked out a bit  i didn   t want to waste my summer  so i scoured the web for every summer program  research fellowship  etc  available  but to no avail  my mom suggested i convince my uncle to hire me for his pharma tech company in philly  it was by far the best thing on my plate  so i spent the first half of my summer there  i began knowing introductory java  i finished two months later knowing c   the sharepoint sdk    net  asp   net  ajax  and javascript  i   d call that a productive   months the next few months i devoted to working at an early stage recruiting startup  in developing the web app i learned ruby on rails  twitter bootstrap  and even some design skills  it really taught me the value of deftness and versatility  i realized how introspective startups need to be  but this is getting away from the point of learning to program i got back to school  ready to stop programming and return to my scholarly grind  but that   s not what happened  i couldn   t stop programming  i spent all my free time doing it  some may wonder how i found the time with schoolwork  i was taking a full coarse load  doing research and working for a startup in pittsburgh  but when you love something enough  you make time  first month back to school i went to a hackathon  pennapps fall       with a good friend from high school  that was the seed to my addiction at that hackathon my friend and i along with a newfound acquaintance built an intelligent collaborative note taking web application called notable  i wasn   t very competent at the time  i basically just worked on twilio integration and some small things here and there  but even in that i learned a ton  i loved the idea enough to dedicate    hours straight to learning whatever i needed to build it  we loved the project  but we definitely didn   t expect to win anything with it  much to our surprise  we did and all received job offers from a huge e commerce startup on the spot as well    gen gave us    best hack for students    and i had all the validation my now seeded addiction needed to grow about   weeks later  my friend suggested we go to hackny  i loved the last one  it was honestly the most fun weekend of my life to that date  so i was gung ho about going to another  we got there excited to build something  anything  but we had absolutely no idea what in particular we were going to build  we wandered around  a kid from michigan we met in the elevator suggested just mashing apis together  but that didn   t excite me  then we met some kids with a very ambitious idea  a popular firefox extension  tilt  enabled developers to view webpages in  d  they wanted to emulate that technology in some sort of game  i immediately thought it was far too ambitious  dismissed it as impossible  wished them good luck  and walked away     minutes later  an implementation had passively fermented in the back of my mind  we returned to the ambitious kids and told them we   d like to help them give it a shot     hours later  dom claimed  st place after this my friend from high school mentioned his plans to pursue a tech internship for the summer  and i suddenly realized that i might be able to do the same if i tried hard enough  i immediately applied online to every tech company i could think of  expecting that with volume i may be able to increase my chances of getting a single tech internship one month later i went to a tech career fair in nyc  i marched in confidently  and handed my resume to a recruiter at the first company i saw  spotify  he had read only   line of the resume when he put it away saying    oh  you   re a sophomore  i   m sorry but we   re only looking for upperclassmen and graduates  please come back next year      i marched right back out of the career fair  down the street to the nearest kinko   s and edited the year off my resume  i wanted at least the slightest chance to impress them before my age came across  upon returning to the fair i had great conversations for several minutes with each of the recruiters before they had even bothered to ask about what year i was in school     by the way  what year are you or have you graduated yet        i   m actually a sophomore       oh  no matter  you seem plenty qualified    was generally what transpired for the remainder of the night i went to a few more hackathons  won a few more prizes  building things like deja vu  a facebook app that builds a  d panorama with a time slider from a facebook event   s photos to virtually recreate the event  and bestaurant  an intelligent restaurant recommendation ios app  as you can see i did not let my skills stagnate  i continued to think of ambitious app ideas and step out of my comfort zone to acquire new skills meanwhile i   d received one interview in december for an engineering internship at a startup in nyc  i immediately consulted the internet to help me prepare for a technical interview  i read memorized topcoder   s algorithm tutorials page  more blog posts than i can count  and    cracking the coding interview     immediately prior i was a nervous wreck  contemplating forgoing the interview for fear of failing alone  it was my first phone interview and i certainly didn   t expect to do well     minutes later i   d completed the interview and complained to my roommates about how i forgot to use a hashmap until reminded and should have drank water before the interview because my voice was coarse and possibly incomprehensible  i was very pessimistic  a week later i had another interview and then got an internship offer  i was ecstatic  i thought it was the best i had and didn   t expect any more interviews  but waited to sign the offer just in case in january  much to my surprise i had several more phone interviews for both small startups and large tech companies like amazon i completely engrossed myself in hackathons  went to   hackathons in   consecutive weekends  went to the foursquare hackathon in nyc where we won with a realtime interactive check in jukebox called jamsesh  went to the university hacker olympics in sf where we built the self explanatory ios and android app called snaproulette  went to pennapps spring      where we won several prizes for our multi device screen stitching app called mosaic  went to tartanhacks where we built a webcam techno piano using computer vision called frequency  and went to mhacks where we built a  d interface for controlling a computer using stereopsis between mobile devices called wand  i was knee deep  sinking further and further into a newfound love for programming  and i loved every moment by february i   d done more technical interviews in   weeks than any sane person could  mostly because i   d sent out a deluge of applications months prior expecting very little response  all of my interviews had been going well  i   d received several offers and soon companies like google  amazon and yahoo were flying me out for interviews  amazon flying me out had been particularly fishy  because after consulting friends who had interned there i   d found that none of them had onsite interviews and were instead offered internships with just phone interviews  regardless i flew out to seattle and took the day long interview  surprised by the difficulty of some of the questions relative to other internship interviews including google but still treating it like every interview i had until then  a few days later i received a call congratulating me on my full time job offer from amazon  i immediately realized what had happened and explained to the hr manager that despite telling them my student status they must have mistook my resume   s omitted graduation year for having already graduated  but she was excited rather than upset by this  she congratulated me on doing so well on a full time technical interview despite my inexperience and offered me both a full time job and internship i continued to travel  attending sxsw interactive as a member of interactatx  flying out to the west coast occasionally for interviews and going to hackathons  my friend and i won hackpsu with hologram  an ios app that takes  d photos by analyzing photos taken under different lighting conditions with the phone   s camera time seemed to fly and before i knew it i   d received almost   dozen internship offers from large tech companies and startups  a full time job offer from amazon  and coverage in techcrunch for hologram and mosaic  now i   m forgoing all of the internship and job opportunities i   d been pursuing to build something of my own through co founding a tech startup  it will be incredibly difficult  but my experiences so far make me think nothing is impossible addendum it   s been   months since i wrote this  i was afraid to post it publicly then and still am  but i   ve been sending it privately to everyone who asks    i want to learn how to code  how did you learn so quickly     since i initially wrote this i turned     mosaic won an apple design award at wwdc alongside letterpress  evernote  yahoo  weather  etc  and was subsequently featured on the app store i also joined the startup accelerator y combinator with my aforementioned startup  watchsend  and just finished  we   re almost done raising our seed round of angel funding and i   m very excited for what   s to come i   ll never forget how critical hackathons were for my development  i have a special sore spot in my heart for them  and despite working full time on watchsend  i take the time to go to  and now help organize  college hackathons like pennapps  mhacks  and hackmit to give more students the opportunities that changed my life teaching machines  openai previously   claralabs  watchsend  mosaicio  ycombinator s  